{
  "lesson.regexForSeo.starter.title": "Wyrażenia regularne w SEO",
  "lesson.regexForSeo.starter.description": "Regexy to zbiór wyrażeń regularnych często używanych w wielu dziedzinach, zwłaszcza przez osoby pragnące zwiększyć swoją produktywność. Zalety korzystania z regexów w SEO to łatwiejsza analiza dużych zbiorów danych i tworzenie bardziej zaawansowanych filtrów. Jeśli dopiero zaczynasz przygodę z wyrażeniami regularnymi, to zalecamy rozpoczęcie od samouczka `Regex 101`. \n\nZacznij od wpisania `OK` w polu \"Regex\", aby przejść do kolejnej sekcji i uzyskać bardziej szczegółowe wyjaśnienia.",

  "lesson.regexForSeo.usage.title": "Przykłady użycia",
  "lesson.regexForSeo.usage.description": "Możesz używać wyrażeń regularnych w SEO na takich platformach jak `Google Analytics`, `Google Data Studio`, `Google Sheets`, `Google Search Console`, `Ahrefs`, `Deepcrawl` czy też `Screaming Frog`. Często stosuje się je również w plikach `.htaccess` i `robots.txt` (ze składnią podobną do regexów).\\n\\nPoniżej znajduje się przykładowe wyrażenie regularne, które zaznaczy na liście tylko teksty, które rozpoczynają się od `Google`.",

  "lesson.regexForSeo.basics.title": "Podstawy",
  "lesson.regexForSeo.basics.description": "Przyjrzyjmy się niektórym często używanym wyrażeniom regularnym. Zalecamy zapoznanie się z samouczkiem `Regex 101`, aby dowiedzieć się więcej na ich temat. Aby rozpocząć, wpisz `Yes`.",

  "lesson.regexForSeo.or.title": "Operator \"lub\" `|`",
  "lesson.regexForSeo.or.description": "Używamy operatora \"lub\" `|`, aby filtrować wiele wyrażeń jednocześnie. Na przykład, aby przefiltrować tekst jednocześnie pod kątem słów `seo`, jak i `regex`, należy wpisać oba słowa, oddzielając je operatorem `|`.",

  "lesson.regexForSeo.optional.title": "Operator opcjonalności `?`",
  "lesson.regexForSeo.optional.description": "Używamy go, aby wyrazić, że wyrażenie lub znak jest opcjonalny. Na przykład, jeśli chcemy przefiltrować tekst zawierający zarówno `http`, jak i `https`, możemy użyć operatora `|`, ale istnieje lepszy sposób dla tych dwóch prawie identycznych słów.\n\nW tym przykładzie litera `s` jest opcjonalna. Dodaj znak zapytania `?` na końcu litery `s`.",

  "lesson.regexForSeo.any.title": "Wszystko `.*`",
  "lesson.regexForSeo.any.description": "W wyrażeniach regularnych kropka `.` może dopasować dowolny znak, włącznie ze spacjami. Jednak dopasowanie to dotyczy tylko pojedynczego znaku. Znak gwiazdki `*` oznacza, że poprzedni element nie istnieje w ogóle lub występuje wiele razy w tekście. Gdy oba znaki są używane razem, oznacza to, że w dopasowaniu może występować element o nieograniczonej długości.\n\nPoniżej znajdują się różne słowa kluczowe. Dodaj `.*` na końcu wyrażenia regularnego, tak aby napisać wyrażenie, które dopasowuje tekst `how to write ` i wszystko po nim.",

  "lesson.regexForSeo.contains.title": "Zawieranie",
  "lesson.regexForSeo.contains.description": "Aby przefiltrować tekst zawierający szukane słowa lub frazy, należy napisać słowo, którego szukamy, między dwoma wyrażeniami `.*`, które dopasowują wszystko. Na przykład, wpisz `.*buy.*`, aby przefiltrować to, co zawiera `buy`.",

  "lesson.regexForSeo.negated.title": "Negacja zbioru znaków `[^abc]`",
  "lesson.regexForSeo.negated.description": "Negacji zbioru znaków `[^]` używamy by wykluczyć określone znaki. Te znaki, których nie chcemy uwzględniać, zapisujemy w nawiasach kwadratowych z daszkiem na początku. Poniżej występują zarówno słowa `http`, jak i `https`. Ponieważ `http` występuje w obu, wyrażenie regularne wybierze również `https`. Wpisz `[^s]` po literze `p`, aby wykluczyć literę `s`.",

  "lesson.regexForSeo.caret.title": "Znak daszka `^`",
  "lesson.regexForSeo.caret.description": "Let's say we have a list of URLs, and we want to find only those URLs that start with `http`. But URLs also contain `http` in different parts other than their beginning. So add a caret `^` to the beginning of the following expression to filter out only those starting with `http`.",

  "lesson.regexForSeo.dollarAndEscape.title": "Znak dolara `$` oraz znak ucieczki `\\`",
  "lesson.regexForSeo.dollarAndEscape.description": "Again we have a list of URLs. We want to find only those URLs ending in `.htm`.\\n\\nSince the period `.` is a special character that matches everything, we first need to disable the period before `htm` using the escape character `\\`. This applies to all special characters.\\n\\nThen add a `$` sign to the end of the expression. This ensures that the text to be filtered ends with the expression written before it.",

  "lesson.regexForSeo.limitation.title": "Ograniczenia długości `{n}`",
  "lesson.regexForSeo.limitation.description": "We may want to filter the results by character lengths. For example, to filter URLs that are `35` characters long, type the number you want to use for the length, `{35}`, using curly braces at the end of the period `.`.",

  "lesson.regexForSeo.maxLimitation.title": "Ograniczenia długości (maksimum) `{n,m}`",
  "lesson.regexForSeo.maxLimitation.description": "To filter URLs with a maximum length of `35` characters, type `{1,35}` the minimum and maximum number values we will use for the length, using curly braces at the end of the period `.`.",

  "lesson.regexForSeo.minLimitation.title": "Ograniczenia długości (minumum) `{n,}`",
  "lesson.regexForSeo.minLimitation.description": "To filter URLs with a minimum length of `35` characters, type `{35,}` using curly braces at the end of the period and ending with a comma for the minimum number value we will use for the length.",

  "lesson.regexForSeo.robots.title": "robots.txt (składnia podobna do regexów)",
  "lesson.regexForSeo.robots.description": "Here is an example of regex-like usage in the `robots.txt` file. The example states that bots should not crawl links with the extension `pdf`.",

  "lesson.regexForSeo.htaccess.title": ".htaccess",
  "lesson.regexForSeo.htaccess.description": "Here is an example of using regex in the `.htaccess` file. In the example, `php` extension links are directed to `html` extensions with `301` code.",

  "lesson.regexForSeo.outro.title": "Zakończenie",
  "lesson.regexForSeo.outro.description": "Regex knowledge is a skill that increases productivity on any platform that allows you to use regex. Once you start using it and improve this skill, it will help you complete many repetitive tasks faster and save time for other things. To better understand the basics of Regex, you can visit the `Regex 101` tutorial. You can use the `Playground` page to test your expressions on your texts."
}
